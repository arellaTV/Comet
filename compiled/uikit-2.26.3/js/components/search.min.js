"use strict";

/*! UIkit 2.26.3 | http://www.getuikit.com | (c) 2014 YOOtheme | MIT License */
!function (e) {
  var s;window.UIkit && (s = e(UIkit)), "function" == typeof define && define.amd && define("uikit-search", ["uikit"], function () {
    return s || e(UIkit);
  });
}(function (e) {
  "use strict";
  e.component("search", { defaults: { msgResultsHeader: "Search Results", msgMoreResults: "More Results", msgNoResults: "No results found", template: '<ul class="uk-nav uk-nav-search uk-autocomplete-results">                                      {{#msgResultsHeader}}<li class="uk-nav-header uk-skip">{{msgResultsHeader}}</li>{{/msgResultsHeader}}                                      {{#items && items.length}}                                          {{~items}}                                          <li data-url="{{!$item.url}}">                                              <a href="{{!$item.url}}">                                                  {{{$item.title}}}                                                  {{#$item.text}}<div>{{{$item.text}}}</div>{{/$item.text}}                                              </a>                                          </li>                                          {{/items}}                                          {{#msgMoreResults}}                                              <li class="uk-nav-divider uk-skip"></li>                                              <li class="uk-search-moreresults" data-moreresults="true"><a href="#" onclick="jQuery(this).closest(\'form\').submit();">{{msgMoreResults}}</a></li>                                          {{/msgMoreResults}}                                      {{/end}}                                      {{^items.length}}                                        {{#msgNoResults}}<li class="uk-skip"><a>{{msgNoResults}}</a></li>{{/msgNoResults}}                                      {{/end}}                                  </ul>', renderer: function renderer(e) {
        var s = this.options;this.dropdown.append(this.template({ items: e.results || [], msgResultsHeader: s.msgResultsHeader, msgMoreResults: s.msgMoreResults, msgNoResults: s.msgNoResults })), this.show();
      } }, boot: function boot() {
      e.$html.on("focus.search.uikit", "[data-uk-search]", function () {
        var s = e.$(this);s.data("search") || e.search(s, e.Utils.options(s.attr("data-uk-search")));
      });
    }, init: function init() {
      var s = this;this.autocomplete = e.autocomplete(this.element, this.options), this.autocomplete.dropdown.addClass("uk-dropdown-search"), this.autocomplete.input.on("keyup", function () {
        s.element[s.autocomplete.input.val() ? "addClass" : "removeClass"]("uk-active");
      }).closest("form").on("reset", function () {
        s.value = "", s.element.removeClass("uk-active");
      }), this.on("selectitem.uk.autocomplete", function (e, t) {
        t.url ? location.href = t.url : t.moreresults && s.autocomplete.input.closest("form").submit();
      }), this.element.data("search", this);
    } });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Vpa2l0LTIuMjYuMy9qcy9jb21wb25lbnRzL3NlYXJjaC5taW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsQ0FBQyxVQUFTLENBQVQsRUFBVztBQUFDLE1BQUksQ0FBSixDQUFNLE9BQU8sS0FBUCxLQUFlLElBQUUsRUFBRSxLQUFGLENBQWpCLEdBQTJCLGNBQVksT0FBTyxNQUFuQixJQUEyQixPQUFPLEdBQWxDLElBQXVDLE9BQU8sY0FBUCxFQUFzQixDQUFDLE9BQUQsQ0FBdEIsRUFBZ0MsWUFBVTtBQUFDLFdBQU8sS0FBRyxFQUFFLEtBQUYsQ0FBVjtBQUFtQixHQUE5RCxDQUFsRTtBQUFrSSxDQUFwSixDQUFxSixVQUFTLENBQVQsRUFBVztBQUFDO0FBQWEsSUFBRSxTQUFGLENBQVksUUFBWixFQUFxQixFQUFDLFVBQVMsRUFBQyxrQkFBaUIsZ0JBQWxCLEVBQW1DLGdCQUFlLGNBQWxELEVBQWlFLGNBQWEsa0JBQTlFLEVBQWlHLFVBQVMsazlDQUExRyxFQUE2akQsVUFBUyxrQkFBUyxDQUFULEVBQVc7QUFBQyxZQUFJLElBQUUsS0FBSyxPQUFYLENBQW1CLEtBQUssUUFBTCxDQUFjLE1BQWQsQ0FBcUIsS0FBSyxRQUFMLENBQWMsRUFBQyxPQUFNLEVBQUUsT0FBRixJQUFXLEVBQWxCLEVBQXFCLGtCQUFpQixFQUFFLGdCQUF4QyxFQUF5RCxnQkFBZSxFQUFFLGNBQTFFLEVBQXlGLGNBQWEsRUFBRSxZQUF4RyxFQUFkLENBQXJCLEdBQTJKLEtBQUssSUFBTCxFQUEzSjtBQUF1SyxPQUE1d0QsRUFBVixFQUF3eEQsTUFBSyxnQkFBVTtBQUFDLFFBQUUsS0FBRixDQUFRLEVBQVIsQ0FBVyxvQkFBWCxFQUFnQyxrQkFBaEMsRUFBbUQsWUFBVTtBQUFDLFlBQUksSUFBRSxFQUFFLENBQUYsQ0FBSSxJQUFKLENBQU4sQ0FBZ0IsRUFBRSxJQUFGLENBQU8sUUFBUCxLQUFrQixFQUFFLE1BQUYsQ0FBUyxDQUFULEVBQVcsRUFBRSxLQUFGLENBQVEsT0FBUixDQUFnQixFQUFFLElBQUYsQ0FBTyxnQkFBUCxDQUFoQixDQUFYLENBQWxCO0FBQXdFLE9BQXRKO0FBQXdKLEtBQWg4RCxFQUFpOEQsTUFBSyxnQkFBVTtBQUFDLFVBQUksSUFBRSxJQUFOLENBQVcsS0FBSyxZQUFMLEdBQWtCLEVBQUUsWUFBRixDQUFlLEtBQUssT0FBcEIsRUFBNEIsS0FBSyxPQUFqQyxDQUFsQixFQUE0RCxLQUFLLFlBQUwsQ0FBa0IsUUFBbEIsQ0FBMkIsUUFBM0IsQ0FBb0Msb0JBQXBDLENBQTVELEVBQXNILEtBQUssWUFBTCxDQUFrQixLQUFsQixDQUF3QixFQUF4QixDQUEyQixPQUEzQixFQUFtQyxZQUFVO0FBQUMsVUFBRSxPQUFGLENBQVUsRUFBRSxZQUFGLENBQWUsS0FBZixDQUFxQixHQUFyQixLQUEyQixVQUEzQixHQUFzQyxhQUFoRCxFQUErRCxXQUEvRDtBQUE0RSxPQUExSCxFQUE0SCxPQUE1SCxDQUFvSSxNQUFwSSxFQUE0SSxFQUE1SSxDQUErSSxPQUEvSSxFQUF1SixZQUFVO0FBQUMsVUFBRSxLQUFGLEdBQVEsRUFBUixFQUFXLEVBQUUsT0FBRixDQUFVLFdBQVYsQ0FBc0IsV0FBdEIsQ0FBWDtBQUE4QyxPQUFoTixDQUF0SCxFQUF3VSxLQUFLLEVBQUwsQ0FBUSw0QkFBUixFQUFxQyxVQUFTLENBQVQsRUFBVyxDQUFYLEVBQWE7QUFBQyxVQUFFLEdBQUYsR0FBTSxTQUFTLElBQVQsR0FBYyxFQUFFLEdBQXRCLEdBQTBCLEVBQUUsV0FBRixJQUFlLEVBQUUsWUFBRixDQUFlLEtBQWYsQ0FBcUIsT0FBckIsQ0FBNkIsTUFBN0IsRUFBcUMsTUFBckMsRUFBekM7QUFBdUYsT0FBMUksQ0FBeFUsRUFBb2QsS0FBSyxPQUFMLENBQWEsSUFBYixDQUFrQixRQUFsQixFQUEyQixJQUEzQixDQUFwZDtBQUFxZixLQUFqOUUsRUFBckI7QUFBeStFLENBQXZwRixDQUFEIiwiZmlsZSI6InNlYXJjaC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgVUlraXQgMi4yNi4zIHwgaHR0cDovL3d3dy5nZXR1aWtpdC5jb20gfCAoYykgMjAxNCBZT090aGVtZSB8IE1JVCBMaWNlbnNlICovXG4hZnVuY3Rpb24oZSl7dmFyIHM7d2luZG93LlVJa2l0JiYocz1lKFVJa2l0KSksXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoXCJ1aWtpdC1zZWFyY2hcIixbXCJ1aWtpdFwiXSxmdW5jdGlvbigpe3JldHVybiBzfHxlKFVJa2l0KX0pfShmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtlLmNvbXBvbmVudChcInNlYXJjaFwiLHtkZWZhdWx0czp7bXNnUmVzdWx0c0hlYWRlcjpcIlNlYXJjaCBSZXN1bHRzXCIsbXNnTW9yZVJlc3VsdHM6XCJNb3JlIFJlc3VsdHNcIixtc2dOb1Jlc3VsdHM6XCJObyByZXN1bHRzIGZvdW5kXCIsdGVtcGxhdGU6Jzx1bCBjbGFzcz1cInVrLW5hdiB1ay1uYXYtc2VhcmNoIHVrLWF1dG9jb21wbGV0ZS1yZXN1bHRzXCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyNtc2dSZXN1bHRzSGVhZGVyfX08bGkgY2xhc3M9XCJ1ay1uYXYtaGVhZGVyIHVrLXNraXBcIj57e21zZ1Jlc3VsdHNIZWFkZXJ9fTwvbGk+e3svbXNnUmVzdWx0c0hlYWRlcn19ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyNpdGVtcyAmJiBpdGVtcy5sZW5ndGh9fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7fml0ZW1zfX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS11cmw9XCJ7eyEkaXRlbS51cmx9fVwiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwie3shJGl0ZW0udXJsfX1cIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7eyRpdGVtLnRpdGxlfX19ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyMkaXRlbS50ZXh0fX08ZGl2Pnt7eyRpdGVtLnRleHR9fX08L2Rpdj57ey8kaXRlbS50ZXh0fX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3svaXRlbXN9fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7I21zZ01vcmVSZXN1bHRzfX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwidWstbmF2LWRpdmlkZXIgdWstc2tpcFwiPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInVrLXNlYXJjaC1tb3JlcmVzdWx0c1wiIGRhdGEtbW9yZXJlc3VsdHM9XCJ0cnVlXCI+PGEgaHJlZj1cIiNcIiBvbmNsaWNrPVwialF1ZXJ5KHRoaXMpLmNsb3Nlc3QoXFwnZm9ybVxcJykuc3VibWl0KCk7XCI+e3ttc2dNb3JlUmVzdWx0c319PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3svbXNnTW9yZVJlc3VsdHN9fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3svZW5kfX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7Xml0ZW1zLmxlbmd0aH19ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7I21zZ05vUmVzdWx0c319PGxpIGNsYXNzPVwidWstc2tpcFwiPjxhPnt7bXNnTm9SZXN1bHRzfX08L2E+PC9saT57ey9tc2dOb1Jlc3VsdHN9fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3svZW5kfX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4nLHJlbmRlcmVyOmZ1bmN0aW9uKGUpe3ZhciBzPXRoaXMub3B0aW9uczt0aGlzLmRyb3Bkb3duLmFwcGVuZCh0aGlzLnRlbXBsYXRlKHtpdGVtczplLnJlc3VsdHN8fFtdLG1zZ1Jlc3VsdHNIZWFkZXI6cy5tc2dSZXN1bHRzSGVhZGVyLG1zZ01vcmVSZXN1bHRzOnMubXNnTW9yZVJlc3VsdHMsbXNnTm9SZXN1bHRzOnMubXNnTm9SZXN1bHRzfSkpLHRoaXMuc2hvdygpfX0sYm9vdDpmdW5jdGlvbigpe2UuJGh0bWwub24oXCJmb2N1cy5zZWFyY2gudWlraXRcIixcIltkYXRhLXVrLXNlYXJjaF1cIixmdW5jdGlvbigpe3ZhciBzPWUuJCh0aGlzKTtzLmRhdGEoXCJzZWFyY2hcIil8fGUuc2VhcmNoKHMsZS5VdGlscy5vcHRpb25zKHMuYXR0cihcImRhdGEtdWstc2VhcmNoXCIpKSl9KX0saW5pdDpmdW5jdGlvbigpe3ZhciBzPXRoaXM7dGhpcy5hdXRvY29tcGxldGU9ZS5hdXRvY29tcGxldGUodGhpcy5lbGVtZW50LHRoaXMub3B0aW9ucyksdGhpcy5hdXRvY29tcGxldGUuZHJvcGRvd24uYWRkQ2xhc3MoXCJ1ay1kcm9wZG93bi1zZWFyY2hcIiksdGhpcy5hdXRvY29tcGxldGUuaW5wdXQub24oXCJrZXl1cFwiLGZ1bmN0aW9uKCl7cy5lbGVtZW50W3MuYXV0b2NvbXBsZXRlLmlucHV0LnZhbCgpP1wiYWRkQ2xhc3NcIjpcInJlbW92ZUNsYXNzXCJdKFwidWstYWN0aXZlXCIpfSkuY2xvc2VzdChcImZvcm1cIikub24oXCJyZXNldFwiLGZ1bmN0aW9uKCl7cy52YWx1ZT1cIlwiLHMuZWxlbWVudC5yZW1vdmVDbGFzcyhcInVrLWFjdGl2ZVwiKX0pLHRoaXMub24oXCJzZWxlY3RpdGVtLnVrLmF1dG9jb21wbGV0ZVwiLGZ1bmN0aW9uKGUsdCl7dC51cmw/bG9jYXRpb24uaHJlZj10LnVybDp0Lm1vcmVyZXN1bHRzJiZzLmF1dG9jb21wbGV0ZS5pbnB1dC5jbG9zZXN0KFwiZm9ybVwiKS5zdWJtaXQoKX0pLHRoaXMuZWxlbWVudC5kYXRhKFwic2VhcmNoXCIsdGhpcyl9fSl9KTsiXX0=