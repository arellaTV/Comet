"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

!function (t, e) {
		"object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = e(require("react"), require("react-dom")) : "function" == typeof define && define.amd ? define(["react", "react-dom"], e) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.ReactGridLayout = e(require("react"), require("react-dom")) : t.ReactGridLayout = e(t.React, t.ReactDOM);
}(undefined, function (t, e) {
		return function (t) {
				function e(n) {
						if (r[n]) return r[n].exports;var o = r[n] = { exports: {}, id: n, loaded: !1 };return t[n].call(o.exports, o, o.exports, e), o.loaded = !0, o.exports;
				}var r = {};return e.m = t, e.c = r, e.p = "", e(0);
		}([function (t, e, r) {
				"use strict";
				t.exports = r(3)["default"], t.exports.utils = r(2), t.exports.Responsive = r(11)["default"], t.exports.Responsive.utils = r(4), t.exports.WidthProvider = r(12)["default"];
		}, function (e, r) {
				e.exports = t;
		}, function (t, e, r) {
				"use strict";
				function n(t) {
						for (var e = 0, r = void 0, n = 0, o = t.length; o > n; n++) {
								r = t[n].y + t[n].h, r > e && (e = r);
						}return e;
				}function o(t) {
						for (var e = Array(t.length), r = 0, n = t.length; n > r; r++) {
								e[r] = a(t[r]);
						}return e;
				}function a(t) {
						return { w: t.w, h: t.h, x: t.x, y: t.y, i: t.i, minW: t.minW, maxW: t.maxW, minH: t.minH, maxH: t.maxH, moved: Boolean(t.moved), "static": Boolean(t["static"]), isDraggable: t.isDraggable, isResizable: t.isResizable };
				}function i(t, e) {
						return t === e ? !1 : t.x + t.w <= e.x ? !1 : t.x >= e.x + e.w ? !1 : t.y + t.h <= e.y ? !1 : !(t.y >= e.y + e.h);
				}function s(t, e) {
						for (var r = h(t), n = b(t), o = Array(t.length), a = 0, i = n.length; i > a; a++) {
								var s = n[a];s["static"] || (s = u(r, s, e), r.push(s)), o[t.indexOf(s)] = s, s.moved = !1;
						}return o;
				}function u(t, e, r) {
						if (r) for (; e.y > 0 && !p(t, e);) {
								e.y--;
						}for (var n = void 0; n = p(t, e);) {
								e.y = n.y + n.h;
						}return e;
				}function l(t, e) {
						for (var r = h(t), n = 0, o = t.length; o > n; n++) {
								var a = t[n];if (a.x + a.w > e.cols && (a.x = e.cols - a.w), a.x < 0 && (a.x = 0, a.w = e.cols), a["static"]) for (; p(r, a);) {
										a.y++;
								} else r.push(a);
						}return t;
				}function c(t, e) {
						for (var r = 0, n = t.length; n > r; r++) {
								if (t[r].i === e) return t[r];
						}
				}function p(t, e) {
						for (var r = 0, n = t.length; n > r; r++) {
								if (i(t[r], e)) return t[r];
						}
				}function f(t, e) {
						return t.filter(function (t) {
								return i(t, e);
						});
				}function h(t) {
						return t.filter(function (t) {
								return t["static"];
						});
				}function d(t, e, r, n, o) {
						if (e["static"]) return t;if (e.y === n && e.x === r) return t;var a = n && e.y > n;"number" == typeof r && (e.x = r), "number" == typeof n && (e.y = n), e.moved = !0;var i = b(t);a && (i = i.reverse());for (var s = f(i, e), u = 0, l = s.length; l > u; u++) {
								var c = s[u];c.moved || e.y > c.y && e.y - c.y > c.h / 4 || (t = c["static"] ? y(t, c, e, o) : y(t, e, c, o));
						}return t;
				}function y(t, e, r, n) {
						if (n) {
								var o = { x: r.x, y: r.y, w: r.w, h: r.h, i: "-1" };if (o.y = Math.max(e.y - r.h, 0), !p(t, o)) return d(t, r, void 0, o.y);
						}return d(t, r, void 0, r.y + 1);
				}function g(t) {
						return 100 * t + "%";
				}function m(t) {
						var e = t.top,
						    r = t.left,
						    n = t.width,
						    o = t.height,
						    a = "translate(" + r + "px," + e + "px)";return { transform: a, WebkitTransform: a, MozTransform: a, msTransform: a, OTransform: a, width: n + "px", height: o + "px", position: "absolute" };
				}function v(t) {
						var e = t.top,
						    r = t.left,
						    n = t.width,
						    o = t.height;return { top: e + "px", left: r + "px", width: n + "px", height: o + "px", position: "absolute" };
				}function b(t) {
						return [].concat(t).sort(function (t, e) {
								return t.y > e.y || t.y === e.y && t.x > e.x ? 1 : -1;
						});
				}function w(t, e, r, o) {
						Array.isArray(e) || (e = [e]), t = t || [];for (var i = [], u = 0, p = e.length; p > u; u++) {
								var f = void 0,
								    h = e[u],
								    d = c(t, h.key || "1");if (d) f = a(d);else {
										var y = h.props._grid;y ? (T || S([y], "ReactGridLayout.children"), f = a(o ? P({}, y, { y: Math.min(n(i), y.y), i: h.key }) : P({}, y, { y: y.y, i: h.key }))) : f = a({ w: 1, h: 1, x: 0, y: n(i), i: h.key || "1" });
								}i[u] = f;
						}return i = l(i, { cols: r }), i = s(i, o);
				}function S(t, e) {
						e = e || "Layout";var r = ["x", "y", "w", "h"];if (!Array.isArray(t)) throw new Error(e + " must be an array!");for (var n = 0, o = t.length; o > n; n++) {
								for (var a = t[n], i = 0; i < r.length; i++) {
										if ("number" != typeof a[r[i]]) throw new Error("ReactGridLayout: " + e + "[" + n + "]." + r[i] + " must be a number!");
								}if (a.i && "string" != typeof a.i) throw new Error("ReactGridLayout: " + e + "[" + n + "].i must be a string!");if (void 0 !== a["static"] && "boolean" != typeof a["static"]) throw new Error("ReactGridLayout: " + e + "[" + n + "].static must be a boolean!");
						}
				}function x(t, e) {
						e.forEach(function (e) {
								return t[e] = t[e].bind(t);
						});
				}e.__esModule = !0;var P = Object.assign || function (t) {
						for (var e = 1; e < arguments.length; e++) {
								var r = arguments[e];for (var n in r) {
										Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
								}
						}return t;
				};e.bottom = n, e.cloneLayout = o, e.cloneLayoutItem = a, e.collides = i, e.compact = s, e.compactItem = u, e.correctBounds = l, e.getLayoutItem = c, e.getFirstCollision = p, e.getAllCollisions = f, e.getStatics = h, e.moveElement = d, e.moveElementAwayFromCollision = y, e.perc = g, e.setTransform = m, e.setTopLeft = v, e.sortLayoutItemsByRowCol = b, e.synchronizeLayoutWithChildren = w, e.validateLayout = S, e.autoBindHandlers = x;var T = !0;
		}, function (t, e, r) {
				"use strict";
				function n(t) {
						return t && t.__esModule ? t : { "default": t };
				}function o(t, e) {
						if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
				}function a(t, e) {
						if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
				}function i(t, e) {
						if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
				}e.__esModule = !0;var s = Object.assign || function (t) {
						for (var e = 1; e < arguments.length; e++) {
								var r = arguments[e];for (var n in r) {
										Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
								}
						}return t;
				},
				    u = r(1),
				    l = n(u),
				    c = r(5),
				    p = n(c),
				    f = r(2),
				    h = r(10),
				    d = n(h),
				    y = function y() {},
				    g = function (t) {
						function e(r, n) {
								o(this, e);var i = a(this, t.call(this, r, n));return m.call(i), (0, f.autoBindHandlers)(i, ["onDragStart", "onDrag", "onDragStop", "onResizeStart", "onResize", "onResizeStop"]), i;
						}return i(e, t), e.prototype.componentDidMount = function () {
								this.setState({ mounted: !0 }), this.props.onLayoutChange(this.state.layout);
						}, e.prototype.componentWillReceiveProps = function (t) {
								var e = void 0;if ((0, p["default"])(t.layout, this.props.layout) ? t.children.length !== this.props.children.length && (e = this.state.layout) : e = t.layout, e) {
										var r = (0, f.synchronizeLayoutWithChildren)(e, t.children, t.cols, t.verticalCompact);this.setState({ layout: r }), this.props.onLayoutChange(r);
								}
						}, e.prototype.containerHeight = function () {
								return this.props.autoSize ? (0, f.bottom)(this.state.layout) * (this.props.rowHeight + this.props.margin[1]) + this.props.margin[1] + "px" : void 0;
						}, e.prototype.onDragStart = function (t, e, r, n) {
								var o = n.e,
								    a = n.node,
								    i = this.state.layout,
								    s = (0, f.getLayoutItem)(i, t);s && (this.setState({ oldDragItem: (0, f.cloneLayoutItem)(s) }), this.props.onDragStart(i, s, s, null, o, a));
						}, e.prototype.onDrag = function (t, e, r, n) {
								var o = n.e,
								    a = n.node,
								    i = this.state.oldDragItem,
								    s = this.state.layout,
								    u = (0, f.getLayoutItem)(s, t);if (u) {
										var l = { w: u.w, h: u.h, x: u.x, y: u.y, placeholder: !0, i: t };s = (0, f.moveElement)(s, u, e, r, !0), this.props.onDrag(s, i, u, l, o, a), this.setState({ layout: (0, f.compact)(s, this.props.verticalCompact), activeDrag: l });
								}
						}, e.prototype.onDragStop = function (t, e, r, n) {
								var o = n.e,
								    a = n.node,
								    i = this.state.oldDragItem,
								    s = this.state.layout,
								    u = (0, f.getLayoutItem)(s, t);u && (s = (0, f.moveElement)(s, u, e, r, !0), this.props.onDragStop(s, i, u, null, o, a), this.setState({ activeDrag: null, layout: (0, f.compact)(s, this.props.verticalCompact), oldDragItem: null }), this.props.onLayoutChange(this.state.layout));
						}, e.prototype.onResizeStart = function (t, e, r, n) {
								var o = n.e,
								    a = n.node,
								    i = this.state.layout,
								    s = (0, f.getLayoutItem)(i, t);s && (this.setState({ oldResizeItem: (0, f.cloneLayoutItem)(s) }), this.props.onResizeStart(i, s, s, null, o, a));
						}, e.prototype.onResize = function (t, e, r, n) {
								var o = n.e,
								    a = n.node,
								    i = this.state,
								    s = i.layout,
								    u = i.oldResizeItem,
								    l = (0, f.getLayoutItem)(s, t);if (l) {
										l.w = e, l.h = r;var c = { w: e, h: r, x: l.x, y: l.y, "static": !0, i: t };this.props.onResize(s, u, l, c, o, a), this.setState({ layout: (0, f.compact)(s, this.props.verticalCompact), activeDrag: c });
								}
						}, e.prototype.onResizeStop = function (t, e, r, n) {
								var o = n.e,
								    a = n.node,
								    i = this.state,
								    s = i.layout,
								    u = i.oldResizeItem,
								    l = (0, f.getLayoutItem)(s, t);this.props.onResizeStop(s, u, l, null, o, a), this.setState({ activeDrag: null, layout: (0, f.compact)(s, this.props.verticalCompact), oldResizeItem: null }), this.props.onLayoutChange(this.state.layout);
						}, e.prototype.placeholder = function () {
								var t = this.state.activeDrag;if (!t) return null;var e = this.props,
								    r = e.width,
								    n = e.cols,
								    o = e.margin,
								    a = e.rowHeight,
								    i = e.maxRows,
								    s = e.useCSSTransforms;return l["default"].createElement(d["default"], { w: t.w, h: t.h, x: t.x, y: t.y, i: t.i, className: "react-grid-placeholder", containerWidth: r, cols: n, margin: o, maxRows: i, rowHeight: a, isDraggable: !1, isResizable: !1, useCSSTransforms: s }, l["default"].createElement("div", null));
						}, e.prototype.processGridItem = function (t) {
								if (t.key) {
										var e = (0, f.getLayoutItem)(this.state.layout, t.key);if (!e) return null;var r = this.props,
										    n = r.width,
										    o = r.cols,
										    a = r.margin,
										    i = r.rowHeight,
										    s = r.maxRows,
										    u = r.isDraggable,
										    c = r.isResizable,
										    p = r.useCSSTransforms,
										    h = r.draggableCancel,
										    y = r.draggableHandle,
										    g = this.state.mounted,
										    m = Boolean(!e["static"] && u && (e.isDraggable || null == e.isDraggable)),
										    v = Boolean(!e["static"] && c && (e.isResizable || null == e.isResizable));return l["default"].createElement(d["default"], { containerWidth: n, cols: o, margin: a, maxRows: s, rowHeight: i, cancel: h, handle: y, onDragStop: this.onDragStop, onDragStart: this.onDragStart, onDrag: this.onDrag, onResizeStart: this.onResizeStart, onResize: this.onResize, onResizeStop: this.onResizeStop, isDraggable: m, isResizable: v, useCSSTransforms: p && g, usePercentages: !g, w: e.w, h: e.h, x: e.x, y: e.y, i: e.i, minH: e.minH, minW: e.minW, maxH: e.maxH, maxW: e.maxW, "static": e["static"] }, t);
								}
						}, e.prototype.render = function () {
								var t = this,
								    e = this.props,
								    r = e.className,
								    n = e.style,
								    o = "react-grid-layout " + r,
								    a = s({ height: this.containerHeight() }, n);return l["default"].createElement("div", { className: o, style: a }, l["default"].Children.map(this.props.children, function (e) {
										return t.processGridItem(e);
								}), this.placeholder());
						}, e;
				}(l["default"].Component);g.displayName = "ReactGridLayout", g.propTypes = { className: u.PropTypes.string, style: u.PropTypes.object, width: u.PropTypes.number, autoSize: u.PropTypes.bool, cols: u.PropTypes.number, draggableCancel: u.PropTypes.string, draggableHandle: u.PropTypes.string, verticalCompact: u.PropTypes.bool, layout: function v(t) {
								var v = t.layout;void 0 !== v && (0, f.validateLayout)(v, "layout");
						}, margin: u.PropTypes.arrayOf(u.PropTypes.number), rowHeight: u.PropTypes.number, maxRows: u.PropTypes.number, isDraggable: u.PropTypes.bool, isResizable: u.PropTypes.bool, useCSSTransforms: u.PropTypes.bool, onLayoutChange: u.PropTypes.func, onDragStart: u.PropTypes.func, onDrag: u.PropTypes.func, onDragStop: u.PropTypes.func, onResizeStart: u.PropTypes.func, onResize: u.PropTypes.func, onResizeStop: u.PropTypes.func, children: function b(t, e, r) {
								u.PropTypes.node.apply(this, arguments);var b = t[e],
								    n = {};l["default"].Children.forEach(b, function (t) {
										if (n[t.key]) throw new Error("Duplicate child key found! This will cause problems in ReactGridLayout.");n[t.key] = !0;
								});
						} }, g.defaultProps = { autoSize: !0, cols: 12, className: "", rowHeight: 150, maxRows: 1 / 0, layout: [], margin: [10, 10], isDraggable: !0, isResizable: !0, useCSSTransforms: !0, verticalCompact: !0, onLayoutChange: y, onDragStart: y, onDrag: y, onDragStop: y, onResizeStart: y, onResize: y, onResizeStop: y };var m = function m() {
						this.state = { activeDrag: null, layout: (0, f.synchronizeLayoutWithChildren)(this.props.layout, this.props.children, this.props.cols, this.props.verticalCompact), mounted: !1, oldDragItem: null, oldResizeItem: null };
				};e["default"] = g;
		}, function (t, e, r) {
				"use strict";
				function n(t, e) {
						for (var r = i(t), n = r[0], o = 1, a = r.length; a > o; o++) {
								var s = r[o];e > t[s] && (n = s);
						}return n;
				}function o(t, e) {
						if (!e[t]) throw new Error("ResponsiveReactGridLayout: `cols` entry for breakpoint " + t + " is missing!");return e[t];
				}function a(t, e, r, n, o, a) {
						if (t[r]) return (0, s.cloneLayout)(t[r]);for (var u = t[n], l = i(e), c = l.slice(l.indexOf(r)), p = 0, f = c.length; f > p; p++) {
								var h = c[p];if (t[h]) {
										u = t[h];break;
								}
						}return u = (0, s.cloneLayout)(u || []), (0, s.compact)((0, s.correctBounds)(u, { cols: o }), a);
				}function i(t) {
						var e = Object.keys(t);return e.sort(function (e, r) {
								return t[e] - t[r];
						});
				}e.__esModule = !0, e.getBreakpointFromWidth = n, e.getColsFromBreakpoint = o, e.findOrGenerateResponsiveLayout = a, e.sortBreakpoints = i;var s = r(2);
		}, function (t, e, r) {
				function n(t, e) {
						for (var r = -1, n = t.length; ++r < n;) {
								if (e(t[r], r, t)) return !0;
						}return !1;
				}function o(t) {
						var e = !1;if (null != t && "function" != typeof t.toString) try {
								e = !!(t + "");
						} catch (r) {}return e;
				}function a(t) {
						var e = -1,
						    r = Array(t.size);return t.forEach(function (t, n) {
								r[++e] = [n, t];
						}), r;
				}function i(t) {
						var e = -1,
						    r = Array(t.size);return t.forEach(function (t) {
								r[++e] = t;
						}), r;
				}function s(t, e) {
						return ut.call(t, e) || "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && e in t && null === d(t);
				}function u(t, e, r, n, o) {
						return t === e ? !0 : null == t || null == e || !w(t) && !S(e) ? t !== t && e !== e : l(t, e, u, r, n, o);
				}function l(t, e, r, n, a, i) {
						var s = Ot(t),
						    u = Ot(e),
						    l = z,
						    h = z;s || (l = y(t), l = l == C ? N : l), u || (h = y(e), h = h == C ? N : h);var d = l == N && !o(t),
						    g = h == N && !o(e),
						    m = l == h;if (m && !d) return i || (i = new T()), s || P(t) ? c(t, e, r, n, a, i) : p(t, e, l, r, n, a, i);if (!(a & D)) {
								var v = d && ut.call(t, "__wrapped__"),
								    b = g && ut.call(e, "__wrapped__");if (v || b) {
										var w = v ? t.value() : t,
										    S = b ? e.value() : e;return i || (i = new T()), r(w, S, n, a, i);
								}
						}return m ? (i || (i = new T()), f(t, e, r, n, a, i)) : !1;
				}function c(t, e, r, o, a, i) {
						var s = -1,
						    u = a & D,
						    l = a & j,
						    c = t.length,
						    p = e.length;if (c != p && !(u && p > c)) return !1;var f = i.get(t);if (f) return f == e;var h = !0;for (i.set(t, e); ++s < c;) {
								var d = t[s],
								    y = e[s];if (o) var g = u ? o(y, d, s, e, t, i) : o(d, y, s, t, e, i);if (void 0 !== g) {
										if (g) continue;h = !1;break;
								}if (l) {
										if (!n(e, function (t) {
												return d === t || r(d, t, o, a, i);
										})) {
												h = !1;break;
										}
								} else if (d !== y && !r(d, y, o, a, i)) {
										h = !1;break;
								}
						}return i["delete"](t), h;
				}function p(t, e, r, n, o, s, u) {
						switch (r) {case U:
										if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset) return !1;t = t.buffer, e = e.buffer;case q:
										return !(t.byteLength != e.byteLength || !n(new ft(t), new ft(e)));case M:case k:
										return +t == +e;case E:
										return t.name == e.name && t.message == e.message;case A:
										return t != +t ? e != +e : t == +e;case B:case Y:
										return t == e + "";case H:
										var l = a;case X:
										var p = s & D;if (l || (l = i), t.size != e.size && !p) return !1;var f = u.get(t);return f ? f == e : (s |= j, u.set(t, e), c(l(t), l(e), n, o, s, u));case G:
										if (Rt) return Rt.call(t) == Rt.call(e);}return !1;
				}function f(t, e, r, n, o, a) {
						var i = o & D,
						    u = R(t),
						    l = u.length,
						    c = R(e),
						    p = c.length;if (l != p && !i) return !1;for (var f = l; f--;) {
								var h = u[f];if (!(i ? h in e : s(e, h))) return !1;
						}var d = a.get(t);if (d) return d == e;var y = !0;a.set(t, e);for (var g = i; ++f < l;) {
								h = u[f];var m = t[h],
								    v = e[h];if (n) var b = i ? n(v, m, h, e, t, a) : n(m, v, h, t, e, a);if (!(void 0 === b ? m === v || r(m, v, n, o, a) : b)) {
										y = !1;break;
								}g || (g = "constructor" == h);
						}if (y && !g) {
								var w = t.constructor,
								    S = e.constructor;w != S && "constructor" in t && "constructor" in e && !("function" == typeof w && w instanceof w && "function" == typeof S && S instanceof S) && (y = !1);
						}return a["delete"](t), y;
				}function h(t, e) {
						var r = t[e];return x(r) ? r : void 0;
				}function d(t) {
						return ht(Object(t));
				}function y(t) {
						return lt.call(t);
				}function g(t) {
						if (null != t) {
								try {
										return st.call(t);
								} catch (e) {}try {
										return t + "";
								} catch (e) {}
						}return "";
				}function m(t, e) {
						return u(t, e);
				}function v(t) {
						var e = w(t) ? lt.call(t) : "";return e == W || e == L;
				}function b(t) {
						return "number" == typeof t && t > -1 && t % 1 == 0 && _ >= t;
				}function w(t) {
						var e = typeof t === "undefined" ? "undefined" : _typeof(t);return !!t && ("object" == e || "function" == e);
				}function S(t) {
						return !!t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t));
				}function x(t) {
						if (!w(t)) return !1;var e = v(t) || o(t) ? ct : ot;return e.test(g(t));
				}function P(t) {
						return S(t) && b(t.length) && !!at[lt.call(t)];
				}var T = r(14),
				    R = r(15),
				    O = r(13),
				    j = 1,
				    D = 2,
				    _ = 9007199254740991,
				    C = "[object Arguments]",
				    z = "[object Array]",
				    M = "[object Boolean]",
				    k = "[object Date]",
				    E = "[object Error]",
				    W = "[object Function]",
				    L = "[object GeneratorFunction]",
				    H = "[object Map]",
				    A = "[object Number]",
				    N = "[object Object]",
				    I = "[object Promise]",
				    B = "[object RegExp]",
				    X = "[object Set]",
				    Y = "[object String]",
				    G = "[object Symbol]",
				    F = "[object WeakMap]",
				    q = "[object ArrayBuffer]",
				    U = "[object DataView]",
				    $ = "[object Float32Array]",
				    V = "[object Float64Array]",
				    K = "[object Int8Array]",
				    J = "[object Int16Array]",
				    Q = "[object Int32Array]",
				    Z = "[object Uint8Array]",
				    tt = "[object Uint8ClampedArray]",
				    et = "[object Uint16Array]",
				    rt = "[object Uint32Array]",
				    nt = /[\\^$.*+?()[\]{}|]/g,
				    ot = /^\[object .+?Constructor\]$/,
				    at = {};at[$] = at[V] = at[K] = at[J] = at[Q] = at[Z] = at[tt] = at[et] = at[rt] = !0, at[C] = at[z] = at[q] = at[M] = at[U] = at[k] = at[E] = at[W] = at[H] = at[A] = at[N] = at[B] = at[X] = at[Y] = at[F] = !1;var it = Object.prototype,
				    st = Function.prototype.toString,
				    ut = it.hasOwnProperty,
				    lt = it.toString,
				    ct = RegExp("^" + st.call(ut).replace(nt, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
				    pt = O.Symbol,
				    ft = O.Uint8Array,
				    ht = Object.getPrototypeOf,
				    dt = h(O, "DataView"),
				    yt = h(O, "Map"),
				    gt = h(O, "Promise"),
				    mt = h(O, "Set"),
				    vt = h(O, "WeakMap"),
				    bt = g(dt),
				    wt = g(yt),
				    St = g(gt),
				    xt = g(mt),
				    Pt = g(vt),
				    Tt = pt ? pt.prototype : void 0,
				    Rt = Tt ? Tt.valueOf : void 0;(dt && y(new dt(new ArrayBuffer(1))) != U || yt && y(new yt()) != H || gt && y(gt.resolve()) != I || mt && y(new mt()) != X || vt && y(new vt()) != F) && (y = function y(t) {
						var e = lt.call(t),
						    r = e == N ? t.constructor : void 0,
						    n = r ? g(r) : void 0;if (n) switch (n) {case bt:
										return U;case wt:
										return H;case St:
										return I;case xt:
										return X;case Pt:
										return F;}return e;
				});var Ot = Array.isArray;t.exports = m;
		}, function (t, e, r) {
				!function (e, n) {
						t.exports = n(r(1), r(9));
				}(this, function (t, e) {
						return function (t) {
								function e(n) {
										if (r[n]) return r[n].exports;var o = r[n] = { exports: {}, id: n, loaded: !1 };return t[n].call(o.exports, o, o.exports, e), o.loaded = !0, o.exports;
								}var r = {};return e.m = t, e.c = r, e.p = "", e(0);
						}([function (t, e, r) {
								"use strict";
								t.exports = r(1)["default"], t.exports.DraggableCore = r(9)["default"];
						}, function (t, e, r) {
								(function (t) {
										"use strict";
										function n(t) {
												return t && t.__esModule ? t : { "default": t };
										}function o(t, e) {
												if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
										}function a(t, e) {
												if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
										}function i(t, e) {
												if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
										}Object.defineProperty(e, "__esModule", { value: !0 });var s = Object.assign || function (t) {
												for (var e = 1; e < arguments.length; e++) {
														var r = arguments[e];for (var n in r) {
																Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
														}
												}return t;
										},
										    u = function () {
												function t(t, e) {
														var r = [],
														    n = !0,
														    o = !1,
														    a = void 0;try {
																for (var i, s = t[Symbol.iterator](); !(n = (i = s.next()).done) && (r.push(i.value), !e || r.length !== e); n = !0) {}
														} catch (u) {
																o = !0, a = u;
														} finally {
																try {
																		!n && s["return"] && s["return"]();
																} finally {
																		if (o) throw a;
																}
														}return r;
												}return function (e, r) {
														if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, r);throw new TypeError("Invalid attempt to destructure non-iterable instance");
												};
										}(),
										    l = function () {
												function t(t, e) {
														for (var r = 0; r < e.length; r++) {
																var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
														}
												}return function (e, r, n) {
														return r && t(e.prototype, r), n && t(e, n), e;
												};
										}(),
										    c = r(2),
										    p = n(c),
										    f = r(3),
										    h = n(f),
										    d = r(4),
										    y = n(d),
										    g = r(5),
										    m = r(8),
										    v = r(6),
										    b = r(9),
										    w = n(b),
										    S = r(10),
										    x = n(S),
										    P = function (e) {
												function r(t) {
														o(this, r);var e = a(this, Object.getPrototypeOf(r).call(this, t));return e.onDragStart = function (t, r) {
																(0, x["default"])("Draggable: onDragStart: %j", r);var n = e.props.onStart(t, (0, m.createDraggableData)(e, r));return n === !1 ? !1 : void e.setState({ dragging: !0, dragged: !0 });
														}, e.onDrag = function (t, r) {
																if (!e.state.dragging) return !1;(0, x["default"])("Draggable: onDrag: %j", r);var n = (0, m.createDraggableData)(e, r),
																    o = { x: n.x, y: n.y };if (e.props.bounds) {
																		var a = o.x,
																		    i = o.y;o.x += e.state.slackX, o.y += e.state.slackY;var s = (0, m.getBoundPosition)(e, o.x, o.y),
																		    l = u(s, 2);o.x = l[0], o.y = l[1], o.slackX = e.state.slackX + (a - o.x), o.slackY = e.state.slackY + (i - o.y), n.x = a, n.y = i, n.deltaX = o.x - e.state.x, n.deltaY = o.y - e.state.y;
																}var c = e.props.onDrag(t, n);return c === !1 ? !1 : void e.setState(o);
														}, e.onDragStop = function (t, r) {
																if (!e.state.dragging) return !1;var n = e.props.onStop(t, (0, m.createDraggableData)(e, r));if (n === !1) return !1;(0, x["default"])("Draggable: onDragStop: %j", r);var o = { dragging: !1, slackX: 0, slackY: 0 },
																    a = Boolean(e.props.position);if (a) {
																		var i = e.props.position,
																		    s = i.x,
																		    u = i.y;o.x = s, o.y = u;
																}e.setState(o);
														}, e.state = { dragging: !1, dragged: !1, x: t.position ? t.position.x : t.defaultPosition.x, y: t.position ? t.position.y : t.defaultPosition.y, slackX: 0, slackY: 0, isElementSVG: !1 }, e;
												}return i(r, e), l(r, [{ key: "componentWillMount", value: function value() {
																!this.props.position || this.props.onDrag || this.props.onStop || console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.");
														} }, { key: "componentDidMount", value: function value() {
																"undefined" != typeof t.SVGElement && h["default"].findDOMNode(this) instanceof t.SVGElement && this.setState({ isElementSVG: !0 });
														} }, { key: "componentWillReceiveProps", value: function value(t) {
																!t.position || this.props.position && t.position.x === this.props.position.x && t.position.y === this.props.position.y || this.setState({ x: t.position.x, y: t.position.y });
														} }, { key: "componentWillUnmount", value: function value() {
																this.setState({ dragging: !1 });
														} }, { key: "render", value: function value() {
																var t = {},
																    e = null,
																    r = Boolean(this.props.position),
																    n = !r || this.state.dragging,
																    o = this.props.position || this.props.defaultPosition,
																    a = { x: (0, m.canDragX)(this) && n ? this.state.x : o.x, y: (0, m.canDragY)(this) && n ? this.state.y : o.y };this.state.isElementSVG ? e = (0, g.createSVGTransform)(a) : t = (0, g.createCSSTransform)(a);var i = (0, y["default"])(this.props.children.props.className || "", "react-draggable", { "react-draggable-dragging": this.state.dragging, "react-draggable-dragged": this.state.dragged });return p["default"].createElement(w["default"], s({}, this.props, { onStart: this.onDragStart, onDrag: this.onDrag, onStop: this.onDragStop }), p["default"].cloneElement(p["default"].Children.only(this.props.children), { className: i, style: s({}, this.props.children.props.style, t), transform: e }));
														} }]), r;
										}(p["default"].Component);P.displayName = "Draggable", P.propTypes = s({}, w["default"].propTypes, { axis: c.PropTypes.oneOf(["both", "x", "y", "none"]), bounds: c.PropTypes.oneOfType([c.PropTypes.shape({ left: c.PropTypes.number, right: c.PropTypes.number, top: c.PropTypes.number, bottom: c.PropTypes.number }), c.PropTypes.string, c.PropTypes.oneOf([!1])]), defaultPosition: c.PropTypes.shape({ x: c.PropTypes.number, y: c.PropTypes.number }), position: c.PropTypes.shape({ x: c.PropTypes.number, y: c.PropTypes.number }), className: v.dontSetMe, style: v.dontSetMe, transform: v.dontSetMe }), P.defaultProps = s({}, w["default"].defaultProps, { axis: "both", bounds: !1, defaultPosition: { x: 0, y: 0 }, position: null }), e["default"] = P;
								}).call(e, function () {
										return this;
								}());
						}, function (e, r) {
								e.exports = t;
						}, function (t, r) {
								t.exports = e;
						}, function (t, e, r) {
								var n, o; /*!
                  Copyright (c) 2016 Jed Watson.
                  Licensed under the MIT License (MIT), see
                  http://jedwatson.github.io/classnames
                  */
								!function () {
										"use strict";
										function r() {
												for (var t = [], e = 0; e < arguments.length; e++) {
														var n = arguments[e];if (n) {
																var o = typeof n === "undefined" ? "undefined" : _typeof(n);if ("string" === o || "number" === o) t.push(n);else if (Array.isArray(n)) t.push(r.apply(null, n));else if ("object" === o) for (var i in n) {
																		a.call(n, i) && n[i] && t.push(i);
																}
														}
												}return t.join(" ");
										}var a = {}.hasOwnProperty;"undefined" != typeof t && t.exports ? t.exports = r : (n = [], o = function () {
												return r;
										}.apply(e, n), !(void 0 !== o && (t.exports = o)));
								}();
						}, function (t, e, r) {
								"use strict";
								function n(t) {
										return t && t.__esModule ? t : { "default": t };
								}function o(t, e, r) {
										return e in t ? Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = r, t;
								}function a(t, e) {
										return R || (R = (0, x.findInArray)(["matches", "webkitMatchesSelector", "mozMatchesSelector", "msMatchesSelector", "oMatchesSelector"], function (e) {
												return (0, x.isFunction)(t[e]);
										})), t[R].call(t, e);
								}function i(t, e, r) {
										var n = t;do {
												if (a(n, e)) return !0;if (n === r) return !1;n = n.parentNode;
										} while (n);return !1;
								}function s(t, e, r) {
										t && (t.attachEvent ? t.attachEvent("on" + e, r) : t.addEventListener ? t.addEventListener(e, r, !0) : t["on" + e] = r);
								}function u(t, e, r) {
										t && (t.detachEvent ? t.detachEvent("on" + e, r) : t.removeEventListener ? t.removeEventListener(e, r, !0) : t["on" + e] = null);
								}function l(t) {
										var e = t.clientHeight,
										    r = window.getComputedStyle(t);return e += (0, x["int"])(r.borderTopWidth), e += (0, x["int"])(r.borderBottomWidth);
								}function c(t) {
										var e = t.clientWidth,
										    r = window.getComputedStyle(t);return e += (0, x["int"])(r.borderLeftWidth), e += (0, x["int"])(r.borderRightWidth);
								}function p(t) {
										var e = t.clientHeight,
										    r = window.getComputedStyle(t);return e -= (0, x["int"])(r.paddingTop), e -= (0, x["int"])(r.paddingBottom);
								}function f(t) {
										var e = t.clientWidth,
										    r = window.getComputedStyle(t);return e -= (0, x["int"])(r.paddingLeft), e -= (0, x["int"])(r.paddingRight);
								}function h(t, e) {
										var r = e.offsetParent || document.body,
										    n = e.offsetParent === document.body ? { left: 0, top: 0 } : r.getBoundingClientRect(),
										    o = t.clientX + r.scrollLeft - n.left,
										    a = t.clientY + r.scrollTop - n.top;return { x: o, y: a };
								}function d(t) {
										var e = t.x,
										    r = t.y;return o({}, (0, P.browserPrefixToKey)("transform", T["default"]), "translate(" + e + "px," + r + "px)");
								}function y(t) {
										var e = t.x,
										    r = t.y;return "translate(" + e + "," + r + ")";
								}function g(t, e) {
										return t.targetTouches && (0, x.findInArray)(t.targetTouches, function (t) {
												return e === t.identifier;
										}) || t.changedTouches && (0, x.findInArray)(t.changedTouches, function (t) {
												return e === t.identifier;
										});
								}function m(t) {
										return t.targetTouches && t.targetTouches[0] ? t.targetTouches[0].identifier : t.changedTouches && t.changedTouches[0] ? t.changedTouches[0].identifier : void 0;
								}function v() {
										var t = document.body.getAttribute("style") || "";document.body.setAttribute("style", t + D);
								}function b() {
										var t = document.body.getAttribute("style") || "";document.body.setAttribute("style", t.replace(D, ""));
								}function w() {
										var t = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];return S({ touchAction: "none" }, t);
								}Object.defineProperty(e, "__esModule", { value: !0 });var S = Object.assign || function (t) {
										for (var e = 1; e < arguments.length; e++) {
												var r = arguments[e];for (var n in r) {
														Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
												}
										}return t;
								};e.matchesSelector = a, e.matchesSelectorAndParentsTo = i, e.addEvent = s, e.removeEvent = u, e.outerHeight = l, e.outerWidth = c, e.innerHeight = p, e.innerWidth = f, e.offsetXYFromParentOf = h, e.createCSSTransform = d, e.createSVGTransform = y, e.getTouch = g, e.getTouchIdentifier = m, e.addUserSelectStyles = v, e.removeUserSelectStyles = b, e.styleHacks = w;var x = r(6),
								    P = r(7),
								    T = n(P),
								    R = "",
								    O = (0, P.getPrefix)("user-select"),
								    j = (0, P.browserPrefixToStyle)("user-select", O),
								    D = ";" + j + ": none;";
						}, function (t, e) {
								"use strict";
								function r(t, e) {
										for (var r = 0, n = t.length; n > r; r++) {
												if (e.apply(e, [t[r], r, t])) return t[r];
										}
								}function n(t) {
										return "function" == typeof t || "[object Function]" === Object.prototype.toString.call(t);
								}function o(t) {
										return "number" == typeof t && !isNaN(t);
								}function a(t) {
										return parseInt(t, 10);
								}function i(t, e, r) {
										return t[e] ? new Error("Invalid prop " + e + " passed to " + r + " - do not set this, set it on the child.") : void 0;
								}Object.defineProperty(e, "__esModule", { value: !0 }), e.findInArray = r, e.isFunction = n, e.isNum = o, e["int"] = a, e.dontSetMe = i;
						}, function (t, e) {
								"use strict";
								function r() {
										var t = arguments.length <= 0 || void 0 === arguments[0] ? "transform" : arguments[0];if ("undefined" == typeof window || "undefined" == typeof window.document) return "";var e = window.document.documentElement.style;if (t in e) return "";for (var r = 0; r < i.length; r++) {
												if (n(t, i[r]) in e) return i[r];
										}return "";
								}function n(t, e) {
										return e ? "" + e + a(t) : t;
								}function o(t, e) {
										return e ? "-" + e.toLowerCase() + "-" + t : t;
								}function a(t) {
										for (var e = "", r = !0, n = 0; n < t.length; n++) {
												r ? (e += t[n].toUpperCase(), r = !1) : "-" === t[n] ? r = !0 : e += t[n];
										}return e;
								}Object.defineProperty(e, "__esModule", { value: !0 }), e.getPrefix = r, e.browserPrefixToKey = n, e.browserPrefixToStyle = o;var i = ["Moz", "Webkit", "O", "ms"];e["default"] = r();
						}, function (t, e, r) {
								"use strict";
								function n(t) {
										return t && t.__esModule ? t : { "default": t };
								}function o(t, e, r) {
										if (!t.props.bounds) return [e, r];var n = t.props.bounds;n = "string" == typeof n ? n : p(n);var o = d["default"].findDOMNode(t);if ("string" == typeof n) {
												var a = void 0;if ("parent" === n) a = o.parentNode;else if (a = document.querySelector(n), !a) throw new Error('Bounds selector "' + n + '" could not find an element.');var i = window.getComputedStyle(o),
												    s = window.getComputedStyle(a);n = { left: -o.offsetLeft + (0, f["int"])(s.paddingLeft) + (0, f["int"])(i.borderLeftWidth) + (0, f["int"])(i.marginLeft), top: -o.offsetTop + (0, f["int"])(s.paddingTop) + (0, f["int"])(i.borderTopWidth) + (0, f["int"])(i.marginTop), right: (0, y.innerWidth)(a) - (0, y.outerWidth)(o) - o.offsetLeft, bottom: (0, y.innerHeight)(a) - (0, y.outerHeight)(o) - o.offsetTop };
										}return (0, f.isNum)(n.right) && (e = Math.min(e, n.right)), (0, f.isNum)(n.bottom) && (r = Math.min(r, n.bottom)), (0, f.isNum)(n.left) && (e = Math.max(e, n.left)), (0, f.isNum)(n.top) && (r = Math.max(r, n.top)), [e, r];
								}function a(t, e, r) {
										var n = Math.round(e / t[0]) * t[0],
										    o = Math.round(r / t[1]) * t[1];return [n, o];
								}function i(t) {
										return "both" === t.props.axis || "x" === t.props.axis;
								}function s(t) {
										return "both" === t.props.axis || "y" === t.props.axis;
								}function u(t, e, r) {
										var n = "number" == typeof e ? (0, y.getTouch)(t, e) : null;return "number" != typeof e || n ? (0, y.offsetXYFromParentOf)(n || t, d["default"].findDOMNode(r)) : null;
								}function l(t, e, r) {
										var n = t._pendingState || t.state,
										    o = !(0, f.isNum)(n.lastX);return o ? { node: d["default"].findDOMNode(t), deltaX: 0, deltaY: 0, lastX: e, lastY: r, x: e, y: r } : { node: d["default"].findDOMNode(t), deltaX: e - n.lastX, deltaY: r - n.lastY, lastX: n.lastX, lastY: n.lastY, x: e, y: r };
								}function c(t, e) {
										return { node: e.node, x: t.state.x + e.deltaX, y: t.state.y + e.deltaY, deltaX: e.deltaX, deltaY: e.deltaY, lastX: t.state.x, lastY: t.state.y };
								}function p(t) {
										return { left: t.left, top: t.top, right: t.right, bottom: t.bottom };
								}Object.defineProperty(e, "__esModule", { value: !0 }), e.getBoundPosition = o, e.snapToGrid = a, e.canDragX = i, e.canDragY = s, e.getControlPosition = u, e.createCoreData = l, e.createDraggableData = c;var f = r(6),
								    h = r(3),
								    d = n(h),
								    y = r(5);
						}, function (t, e, r) {
								"use strict";
								function n(t) {
										return t && t.__esModule ? t : { "default": t };
								}function o(t, e) {
										if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
								}function a(t, e) {
										if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
								}function i(t, e) {
										if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
								}Object.defineProperty(e, "__esModule", { value: !0 });var s = function () {
										function t(t, e) {
												var r = [],
												    n = !0,
												    o = !1,
												    a = void 0;try {
														for (var i, s = t[Symbol.iterator](); !(n = (i = s.next()).done) && (r.push(i.value), !e || r.length !== e); n = !0) {}
												} catch (u) {
														o = !0, a = u;
												} finally {
														try {
																!n && s["return"] && s["return"]();
														} finally {
																if (o) throw a;
														}
												}return r;
										}return function (e, r) {
												if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) return t(e, r);throw new TypeError("Invalid attempt to destructure non-iterable instance");
										};
								}(),
								    u = function () {
										function t(t, e) {
												for (var r = 0; r < e.length; r++) {
														var n = e[r];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
												}
										}return function (e, r, n) {
												return r && t(e.prototype, r), n && t(e, n), e;
										};
								}(),
								    l = r(2),
								    c = n(l),
								    p = r(3),
								    f = n(p),
								    h = r(5),
								    d = r(8),
								    y = r(6),
								    g = r(10),
								    m = n(g),
								    v = { touch: { start: "touchstart", move: "touchmove", stop: "touchend" }, mouse: { start: "mousedown", move: "mousemove", stop: "mouseup" } },
								    b = v.mouse,
								    w = function (t) {
										function e() {
												var t, r, n, i;o(this, e);for (var u = arguments.length, l = Array(u), c = 0; u > c; c++) {
														l[c] = arguments[c];
												}return r = n = a(this, (t = Object.getPrototypeOf(e)).call.apply(t, [this].concat(l))), n.state = { dragging: !1, lastX: NaN, lastY: NaN, touchIdentifier: null }, n.handleDragStart = function (t) {
														if (n.props.onMouseDown(t), !n.props.allowAnyClick && "number" == typeof t.button && 0 !== t.button) return !1;if (!(n.props.disabled || !(t.target instanceof Node) || n.props.handle && !(0, h.matchesSelectorAndParentsTo)(t.target, n.props.handle, f["default"].findDOMNode(n)) || n.props.cancel && (0, h.matchesSelectorAndParentsTo)(t.target, n.props.cancel, f["default"].findDOMNode(n)))) {
																var e = (0, h.getTouchIdentifier)(t);n.setState({ touchIdentifier: e });var r = (0, d.getControlPosition)(t, e, n);if (null != r) {
																		var o = r.x,
																		    a = r.y,
																		    i = (0, d.createCoreData)(n, o, a);(0, m["default"])("DraggableCore: handleDragStart: %j", i), (0, m["default"])("calling", n.props.onStart);var s = n.props.onStart(t, i);s !== !1 && (n.props.enableUserSelectHack && (0, h.addUserSelectStyles)(), n.setState({ dragging: !0, lastX: o, lastY: a }), (0, h.addEvent)(document, b.move, n.handleDrag), (0, h.addEvent)(document, b.stop, n.handleDragStop));
																}
														}
												}, n.handleDrag = function (t) {
														var e = (0, d.getControlPosition)(t, n.state.touchIdentifier, n);if (null != e) {
																var r = e.x,
																    o = e.y;if (Array.isArray(n.props.grid)) {
																		var a = r - n.state.lastX,
																		    i = o - n.state.lastY,
																		    u = (0, d.snapToGrid)(n.props.grid, a, i),
																		    l = s(u, 2);if (a = l[0], i = l[1], !a && !i) return;r = n.state.lastX + a, o = n.state.lastY + i;
																}var c = (0, d.createCoreData)(n, r, o);(0, m["default"])("DraggableCore: handleDrag: %j", c);var p = n.props.onDrag(t, c);return p === !1 ? void n.handleDragStop(new MouseEvent()) : void n.setState({ lastX: r, lastY: o });
														}
												}, n.handleDragStop = function (t) {
														if (n.state.dragging) {
																var e = (0, d.getControlPosition)(t, n.state.touchIdentifier, n);if (null != e) {
																		var r = e.x,
																		    o = e.y,
																		    a = (0, d.createCoreData)(n, r, o);n.props.enableUserSelectHack && (0, h.removeUserSelectStyles)(), (0, m["default"])("DraggableCore: handleDragStop: %j", a), n.setState({ dragging: !1, lastX: NaN, lastY: NaN }), n.props.onStop(t, a), (0, m["default"])("DraggableCore: Removing handlers"), (0, h.removeEvent)(document, b.move, n.handleDrag), (0, h.removeEvent)(document, b.stop, n.handleDragStop);
																}
														}
												}, n.onMouseDown = function (t) {
														return b = v.mouse, n.handleDragStart(t);
												}, n.onMouseUp = function (t) {
														return b = v.mouse, n.handleDragStop(t);
												}, n.onTouchStart = function (t) {
														return b = v.touch, n.handleDragStart(t);
												}, n.onTouchEnd = function (t) {
														return b = v.touch, n.handleDragStop(t);
												}, i = r, a(n, i);
										}return i(e, t), u(e, [{ key: "componentWillUnmount", value: function value() {
														(0, h.removeEvent)(document, v.mouse.move, this.handleDrag), (0, h.removeEvent)(document, v.touch.move, this.handleDrag), (0, h.removeEvent)(document, v.mouse.stop, this.handleDragStop), (0, h.removeEvent)(document, v.touch.stop, this.handleDragStop), this.props.enableUserSelectHack && (0, h.removeUserSelectStyles)();
												} }, { key: "render", value: function value() {
														return c["default"].cloneElement(c["default"].Children.only(this.props.children), { style: (0, h.styleHacks)(this.props.children.props.style), onMouseDown: this.onMouseDown, onTouchStart: this.onTouchStart, onMouseUp: this.onMouseUp, onTouchEnd: this.onTouchEnd });
												} }]), e;
								}(c["default"].Component);w.displayName = "DraggableCore", w.propTypes = { allowAnyClick: l.PropTypes.bool, disabled: l.PropTypes.bool, enableUserSelectHack: l.PropTypes.bool, grid: l.PropTypes.arrayOf(l.PropTypes.number), handle: l.PropTypes.string, cancel: l.PropTypes.string, onStart: l.PropTypes.func, onDrag: l.PropTypes.func, onStop: l.PropTypes.func, onMouseDown: l.PropTypes.func, className: y.dontSetMe, style: y.dontSetMe, transform: y.dontSetMe }, w.defaultProps = { allowAnyClick: !1, cancel: null, disabled: !1, enableUserSelectHack: !0, handle: null, grid: null, transform: null, onStart: function onStart() {}, onDrag: function onDrag() {}, onStop: function onStop() {}, onMouseDown: function onMouseDown() {} }, e["default"] = w;
						}, function (t, e, r) {
								"use strict";
								function n() {}Object.defineProperty(e, "__esModule", { value: !0 }), e["default"] = n;
						}]);
				});
		}, function (t, e, r) {
				"use strict";
				function n(t) {
						return t && t.__esModule ? t : { "default": t };
				}function o(t, e) {
						var r = {};for (var n in t) {
								e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(t, n) && (r[n] = t[n]);
						}return r;
				}function a(t, e) {
						if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
				}function i(t, e) {
						if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
				}function s(t, e) {
						if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
				}e.__esModule = !0;var u = Object.assign || function (t) {
						for (var e = 1; e < arguments.length; e++) {
								var r = arguments[e];for (var n in r) {
										Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
								}
						}return t;
				},
				    l = r(1),
				    c = n(l),
				    p = r(6),
				    f = r(17),
				    h = n(f),
				    d = function (t) {
						function e() {
								var r, n, o;a(this, e);for (var s = arguments.length, u = Array(s), l = 0; s > l; l++) {
										u[l] = arguments[l];
								}return r = n = i(this, t.call.apply(t, [this].concat(u))), n.state = { resizing: !1, width: n.props.width, height: n.props.height, slackW: 0, slackH: 0 }, o = r, i(n, o);
						}return s(e, t), e.prototype.componentWillReceiveProps = function (t) {
								this.state.resizing || t.width === this.props.width && t.height === this.props.height || this.setState({ width: t.width, height: t.height });
						}, e.prototype.lockAspectRatio = function (t, e, r) {
								return e = t / r, t = e * r, [t, e];
						}, e.prototype.runConstraints = function (t, e) {
								var r = this.props.minConstraints,
								    n = this.props.maxConstraints;if (this.props.lockAspectRatio) {
										var o = this.state.width / this.state.height;e = t / o, t = e * o;
								}if (!r && !n) return [t, e];var a = t,
								    i = e,
								    s = this.state,
								    u = s.slackW,
								    l = s.slackH;return t += u, e += l, r && (t = Math.max(r[0], t), e = Math.max(r[1], e)), n && (t = Math.min(n[0], t), e = Math.min(n[1], e)), u += a - t, l += i - e, u === this.state.slackW && l === this.state.slackH || this.setState({ slackW: u, slackH: l }), [t, e];
						}, e.prototype.resizeHandler = function (t) {
								var e = this;return function (r, n) {
										var o = n.node,
										    a = n.deltaX,
										    i = n.deltaY,
										    s = e.state.width + a,
										    u = e.state.height + i,
										    l = s !== e.state.width,
										    c = u !== e.state.height;if ("onResize" !== t || l || c) {
												var p = e.runConstraints(s, u);s = p[0], u = p[1];var f = {};if ("onResizeStart" === t) f.resizing = !0;else if ("onResizeStop" === t) f.resizing = !1, f.slackW = f.slackH = 0;else {
														if (s === e.state.width && u === e.state.height) return;f.width = s, f.height = u;
												}e.setState(f, function () {
														e.props[t] && e.props[t](r, { node: o, size: { width: s, height: u } });
												});
										}
								};
						}, e.prototype.render = function () {
								var t = this.props,
								    e = (t.width, t.height, o(t, ["width", "height"])),
								    r = e.className ? e.className + " react-resizable" : "react-resizable";return (0, h["default"])(e.children, u({}, e, { className: r, children: [e.children.props.children, c["default"].createElement(p.DraggableCore, u({}, e.draggableOpts, { key: "resizableHandle", ref: "draggable", onStop: this.resizeHandler("onResizeStop"), onStart: this.resizeHandler("onResizeStart"), onDrag: this.resizeHandler("onResize") }), c["default"].createElement("span", { className: "react-resizable-handle" }))] }));
						}, e;
				}(c["default"].Component);d.propTypes = { children: l.PropTypes.element.isRequired, width: l.PropTypes.number.isRequired, height: l.PropTypes.number.isRequired, handleSize: l.PropTypes.array, lockAspectRatio: l.PropTypes.bool, minConstraints: l.PropTypes.arrayOf(l.PropTypes.number), maxConstraints: l.PropTypes.arrayOf(l.PropTypes.number), onResizeStop: l.PropTypes.func, onResizeStart: l.PropTypes.func, onResize: l.PropTypes.func, draggableOpts: l.PropTypes.object }, d.defaultProps = { handleSize: [20, 20], lockAspectRatio: !1, minConstraints: [20, 20], maxConstraints: [1 / 0, 1 / 0] }, e["default"] = d;
		}, function (t, e) {
				t.exports = function (t) {
						return t.webpackPolyfill || (t.deprecate = function () {}, t.paths = [], t.children = [], t.webpackPolyfill = 1), t;
				};
		}, function (t, r) {
				t.exports = e;
		}, function (t, e, r) {
				"use strict";
				function n(t) {
						return t && t.__esModule ? t : { "default": t };
				}function o(t, e) {
						if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
				}function a(t, e) {
						if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
				}function i(t, e) {
						if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
				}e.__esModule = !0;var s = Object.assign || function (t) {
						for (var e = 1; e < arguments.length; e++) {
								var r = arguments[e];for (var n in r) {
										Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
								}
						}return t;
				},
				    u = r(1),
				    l = n(u),
				    c = r(6),
				    p = r(18),
				    f = r(2),
				    h = function (t) {
						function e() {
								var r, n, i;o(this, e);for (var s = arguments.length, u = Array(s), l = 0; s > l; l++) {
										u[l] = arguments[l];
								}return r = n = a(this, t.call.apply(t, [this].concat(u))), n.state = { resizing: null, dragging: null, className: "" }, i = r, a(n, i);
						}return i(e, t), e.prototype.calcColWidth = function () {
								var t = this.props,
								    e = t.margin,
								    r = t.containerWidth,
								    n = t.cols;return (r - e[0] * (n + 1)) / n;
						}, e.prototype.calcPosition = function (t, e, r, n, o) {
								var a = this.props,
								    i = a.margin,
								    s = a.rowHeight,
								    u = this.calcColWidth(),
								    l = { left: Math.round(u * t + (t + 1) * i[0]), top: Math.round(s * e + (e + 1) * i[1]), width: r === 1 / 0 ? r : Math.round(u * r + Math.max(0, r - 1) * i[0]), height: n === 1 / 0 ? n : Math.round(s * n + Math.max(0, n - 1) * i[1]) };return o && o.resizing && (l.width = Math.round(o.resizing.width), l.height = Math.round(o.resizing.height)), o && o.dragging && (l.top = Math.round(o.dragging.top), l.left = Math.round(o.dragging.left)), l;
						}, e.prototype.calcXY = function (t, e) {
								var r = this.props,
								    n = r.margin,
								    o = r.cols,
								    a = r.rowHeight,
								    i = r.w,
								    s = r.h,
								    u = r.maxRows,
								    l = this.calcColWidth(),
								    c = Math.round((e - n[0]) / (l + n[0])),
								    p = Math.round((t - n[1]) / (a + n[1]));return c = Math.max(Math.min(c, o - i), 0), p = Math.max(Math.min(p, u - s), 0), { x: c, y: p };
						}, e.prototype.calcWH = function (t) {
								var e = t.height,
								    r = t.width,
								    n = this.props,
								    o = n.margin,
								    a = n.maxRows,
								    i = n.cols,
								    s = n.rowHeight,
								    u = n.x,
								    l = n.y,
								    c = this.calcColWidth(),
								    p = Math.round((r + o[0]) / (c + o[0])),
								    f = Math.round((e + o[1]) / (s + o[1]));return p = Math.max(Math.min(p, i - u), 0), f = Math.max(Math.min(f, a - l), 0), { w: p, h: f };
						}, e.prototype.createStyle = function (t) {
								var e = this.props,
								    r = e.usePercentages,
								    n = e.containerWidth,
								    o = e.useCSSTransforms,
								    a = void 0;return o ? a = (0, f.setTransform)(t) : (a = (0, f.setTopLeft)(t), r && (a.left = (0, f.perc)(t.left / n), a.width = (0, f.perc)(t.width / n))), a;
						}, e.prototype.mixinDraggable = function (t) {
								return l["default"].createElement(c.DraggableCore, { onStart: this.onDragHandler("onDragStart"), onDrag: this.onDragHandler("onDrag"), onStop: this.onDragHandler("onDragStop"), handle: this.props.handle, cancel: ".react-resizable-handle" + (this.props.cancel ? "," + this.props.cancel : "") }, t);
						}, e.prototype.mixinResizable = function (t, e) {
								var r = this.props,
								    n = r.cols,
								    o = r.x,
								    a = r.minW,
								    i = r.minH,
								    s = r.maxW,
								    u = r.maxH,
								    c = this.calcPosition(0, 0, n - o, 0).width,
								    f = this.calcPosition(0, 0, a, i),
								    h = this.calcPosition(0, 0, s, u),
								    d = [f.width, f.height],
								    y = [Math.min(h.width, c), Math.min(h.height, 1 / 0)];return l["default"].createElement(p.Resizable, { width: e.width, height: e.height, minConstraints: d, maxConstraints: y, onResizeStop: this.onResizeHandler("onResizeStop"), onResizeStart: this.onResizeHandler("onResizeStart"), onResize: this.onResizeHandler("onResize") }, t);
						}, e.prototype.onDragHandler = function (t) {
								var e = this;return function (r, n) {
										var o = n.node,
										    a = n.deltaX,
										    i = n.deltaY;if (e.props[t]) {
												var s = { top: 0, left: 0 };switch (t) {case "onDragStart":
																var u = o.offsetParent.getBoundingClientRect(),
																    l = o.getBoundingClientRect();s.left = l.left - u.left, s.top = l.top - u.top, e.setState({ dragging: s });break;case "onDrag":
																if (!e.state.dragging) throw new Error("onDrag called before onDragStart.");s.left = e.state.dragging.left + a, s.top = e.state.dragging.top + i, e.setState({ dragging: s });break;case "onDragStop":
																if (!e.state.dragging) throw new Error("onDragEnd called before onDragStart.");s.left = e.state.dragging.left, s.top = e.state.dragging.top, e.setState({ dragging: null });break;default:
																throw new Error("onDragHandler called with unrecognized handlerName: " + t);}var c = e.calcXY(s.top, s.left),
												    p = c.x,
												    f = c.y;e.props[t](e.props.i, p, f, { e: r, node: o, newPosition: s });
										}
								};
						}, e.prototype.onResizeHandler = function (t) {
								var e = this;return function (r, n) {
										var o = n.element,
										    a = n.size;if (e.props[t]) {
												var i = e.props,
												    s = i.cols,
												    u = i.x,
												    l = i.i,
												    c = i.maxW,
												    p = i.minW,
												    f = i.maxH,
												    h = i.minH,
												    d = e.calcWH(a),
												    y = d.w,
												    g = d.h;y = Math.min(y, s - u), y = Math.max(y, 1), y = Math.max(Math.min(y, c), p), g = Math.max(Math.min(g, f), h), e.setState({ resizing: "onResizeStop" === t ? null : a }), e.props[t](l, y, g, { e: r, element: o, size: a });
										}
								};
						}, e.prototype.render = function () {
								var t = this.props,
								    e = t.x,
								    r = t.y,
								    n = t.w,
								    o = t.h,
								    a = t.isDraggable,
								    i = t.isResizable,
								    u = t.useCSSTransforms,
								    c = this.calcPosition(e, r, n, o, this.state),
								    p = l["default"].Children.only(this.props.children),
								    f = l["default"].cloneElement(p, { className: ["react-grid-item", p.props.className || "", this.props.className, this.props["static"] ? "static" : "", this.state.resizing ? "resizing" : "", this.state.dragging ? "react-draggable-dragging" : "", u ? "cssTransforms" : ""].join(" "), style: s({}, this.props.style, p.props.style, this.createStyle(c)) });return i && (f = this.mixinResizable(f, c)), a && (f = this.mixinDraggable(f)), f;
						}, e;
				}(l["default"].Component);h.propTypes = { children: u.PropTypes.element, cols: u.PropTypes.number.isRequired, containerWidth: u.PropTypes.number.isRequired, rowHeight: u.PropTypes.number.isRequired, margin: u.PropTypes.array.isRequired, maxRows: u.PropTypes.number.isRequired, x: u.PropTypes.number.isRequired, y: u.PropTypes.number.isRequired, w: u.PropTypes.number.isRequired, h: u.PropTypes.number.isRequired, minW: function minW(t, e, r, n, o) {
								u.PropTypes.number(t, e, r, n, o);var a = t[e];return a > t.w || a > t.maxW ? new Error("minWidth bigger than item width/maxWidth") : void 0;
						}, maxW: function maxW(t, e, r, n, o) {
								u.PropTypes.number(t, e, r, n, o);var a = t[e];return a < t.w || a < t.minW ? new Error("maxWidth smaller than item width/minWidth") : void 0;
						}, minH: function minH(t, e, r, n, o) {
								u.PropTypes.number(t, e, r, n, o);var a = t[e];return a > t.h || a > t.maxH ? new Error("minHeight bigger than item height/maxHeight") : void 0;
						}, maxH: function maxH(t, e, r, n, o) {
								u.PropTypes.number(t, e, r, n, o);var a = t[e];return a < t.h || a < t.minH ? new Error("maxHeight smaller than item height/minHeight") : void 0;
						}, i: u.PropTypes.string.isRequired, onDragStop: u.PropTypes.func, onDragStart: u.PropTypes.func, onDrag: u.PropTypes.func, onResizeStop: u.PropTypes.func, onResizeStart: u.PropTypes.func, onResize: u.PropTypes.func, isDraggable: u.PropTypes.bool.isRequired, isResizable: u.PropTypes.bool.isRequired, "static": u.PropTypes.bool, useCSSTransforms: u.PropTypes.bool.isRequired, className: u.PropTypes.string, handle: u.PropTypes.string, cancel: u.PropTypes.string }, h.defaultProps = { className: "", cancel: "", minH: 1, minW: 1, maxH: 1 / 0, maxW: 1 / 0 }, e["default"] = h;
		}, function (t, e, r) {
				"use strict";
				function n(t) {
						return t && t.__esModule ? t : { "default": t };
				}function o(t, e) {
						var r = {};for (var n in t) {
								e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(t, n) && (r[n] = t[n]);
						}return r;
				}function a(t, e) {
						if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
				}function i(t, e) {
						if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
				}function s(t, e) {
						if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
				}e.__esModule = !0;var u = Object.assign || function (t) {
						for (var e = 1; e < arguments.length; e++) {
								var r = arguments[e];for (var n in r) {
										Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
								}
						}return t;
				},
				    l = r(1),
				    c = n(l),
				    p = r(5),
				    f = n(p),
				    h = r(2),
				    d = r(4),
				    y = r(3),
				    g = n(y),
				    m = function m() {},
				    v = function (t) {
						function e() {
								var r, n, o;a(this, e);for (var s = arguments.length, l = Array(s), c = 0; s > c; c++) {
										l[c] = arguments[c];
								}return r = n = i(this, t.call.apply(t, [this].concat(l))), n.state = n.generateInitialState(), n.onLayoutChange = function (t) {
										var e;n.props.onLayoutChange(t, u({}, n.props.layouts, (e = {}, e[n.state.breakpoint] = t, e)));
								}, o = r, i(n, o);
						}return s(e, t), e.prototype.generateInitialState = function () {
								var t = this.props,
								    e = t.width,
								    r = t.breakpoints,
								    n = t.layouts,
								    o = t.verticalCompact,
								    a = t.cols,
								    i = (0, d.getBreakpointFromWidth)(r, e),
								    s = (0, d.getColsFromBreakpoint)(i, a),
								    u = (0, d.findOrGenerateResponsiveLayout)(n, r, i, i, s, o);return { layout: u, breakpoint: i, cols: s };
						}, e.prototype.componentWillReceiveProps = function (t) {
								if (t.width == this.props.width && t.breakpoint === this.props.breakpoint && (0, f["default"])(t.breakpoints, this.props.breakpoints) && (0, f["default"])(t.cols, this.props.cols)) {
										if (!(0, f["default"])(t.layouts, this.props.layouts)) {
												var e = this.state,
												    r = e.breakpoint,
												    n = e.cols,
												    o = (0, d.findOrGenerateResponsiveLayout)(t.layouts, t.breakpoints, r, r, n, t.verticalLayout);this.setState({ layout: o });
										}
								} else this.onWidthChange(t);
						}, e.prototype.onWidthChange = function (t) {
								var e = t.breakpoints,
								    r = t.verticalLayout,
								    n = t.verticalCompact,
								    o = t.cols,
								    a = t.breakpoint || (0, d.getBreakpointFromWidth)(t.breakpoints, t.width),
								    i = this.state.breakpoint;if (i !== a || this.props.breakpoints !== e || this.props.cols !== o) {
										var s = t.layouts;s[i] = (0, h.cloneLayout)(this.state.layout);var u = (0, d.getColsFromBreakpoint)(a, o),
										    l = (0, d.findOrGenerateResponsiveLayout)(s, e, a, i, u, r);l = (0, h.synchronizeLayoutWithChildren)(l, t.children, u, n), s[a] = l, this.props.onLayoutChange(l, s), this.props.onBreakpointChange(a, u), this.props.onWidthChange(t.width, t.margin, u), this.setState({ breakpoint: a, layout: l, cols: u });
								}
						}, e.prototype.render = function () {
								var t = this.props,
								    e = (t.breakpoint, t.breakpoints, t.cols, t.layouts, t.onBreakpointChange, t.onLayoutChange, t.onWidthChange, o(t, ["breakpoint", "breakpoints", "cols", "layouts", "onBreakpointChange", "onLayoutChange", "onWidthChange"]));return c["default"].createElement(g["default"], u({}, e, { onLayoutChange: this.onLayoutChange, layout: this.state.layout, cols: this.state.cols }));
						}, e;
				}(c["default"].Component);v.propTypes = { breakpoint: c["default"].PropTypes.string, breakpoints: c["default"].PropTypes.object, cols: c["default"].PropTypes.object, layouts: function layouts(t) {
								c["default"].PropTypes.object.isRequired.apply(this, arguments), Object.keys(t.layouts).forEach(function (e) {
										return (0, h.validateLayout)(t.layouts[e], "layouts." + e);
								});
						}, width: c["default"].PropTypes.number.isRequired, onBreakpointChange: c["default"].PropTypes.func, onLayoutChange: c["default"].PropTypes.func, onWidthChange: c["default"].PropTypes.func }, v.defaultProps = { breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }, cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }, layouts: {}, onBreakpointChange: m, onLayoutChange: m, onWidthChange: m }, e["default"] = v;
		}, function (t, e, r) {
				"use strict";
				function n(t) {
						return t && t.__esModule ? t : { "default": t };
				}function o(t, e) {
						if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
				}function a(t, e) {
						if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
				}function i(t, e) {
						if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
				}e.__esModule = !0;var s = Object.assign || function (t) {
						for (var e = 1; e < arguments.length; e++) {
								var r = arguments[e];for (var n in r) {
										Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
								}
						}return t;
				},
				    u = r(1),
				    l = n(u),
				    c = r(9),
				    p = n(c);e["default"] = function (t) {
						var e, r;return r = e = function (e) {
								function r() {
										var t, n, i;o(this, r);for (var s = arguments.length, u = Array(s), l = 0; s > l; l++) {
												u[l] = arguments[l];
										}return t = n = a(this, e.call.apply(e, [this].concat(u))), n.state = { mounted: !1, width: 1280 }, n.onWindowResize = function (t, e) {
												var r = p["default"].findDOMNode(n);n.setState({ width: r.offsetWidth }, e);
										}, i = t, a(n, i);
								}return i(r, e), r.prototype.componentDidMount = function () {
										this.setState({ mounted: !0 }), window.addEventListener("resize", this.onWindowResize), this.onWindowResize();
								}, r.prototype.componentWillUnmount = function () {
										window.removeEventListener("resize", this.onWindowResize);
								}, r.prototype.render = function () {
										return this.props.measureBeforeMount && !this.state.mounted ? l["default"].createElement("div", s({}, this.props, this.state)) : l["default"].createElement(t, s({}, this.props, this.state));
								}, r;
						}(l["default"].Component), e.defaultProps = { measureBeforeMount: !1 }, e.propTypes = { measureBeforeMount: l["default"].PropTypes.bool }, r;
				};
		}, function (t, e, r) {
				(function (t, r) {
						function n(t) {
								return t && t.Object === Object ? t : null;
						}var o = { "function": !0, object: !0 },
						    a = o[typeof e === "undefined" ? "undefined" : _typeof(e)] && e && !e.nodeType ? e : void 0,
						    i = o[typeof t === "undefined" ? "undefined" : _typeof(t)] && t && !t.nodeType ? t : void 0,
						    s = n(a && i && "object" == (typeof r === "undefined" ? "undefined" : _typeof(r)) && r),
						    u = n(o[typeof self === "undefined" ? "undefined" : _typeof(self)] && self),
						    l = n(o[typeof window === "undefined" ? "undefined" : _typeof(window)] && window),
						    c = n(o[_typeof(this)] && this),
						    p = s || l !== (c && c.window) && l || u || c || Function("return this")();t.exports = p;
				}).call(e, r(8)(t), function () {
						return this;
				}());
		}, function (t, e, r) {
				(function (t, r) {
						function n(t) {
								return t && t.Object === Object ? t : null;
						}function o(t) {
								var e = !1;if (null != t && "function" != typeof t.toString) try {
										e = !!(t + "");
								} catch (r) {}return e;
						}function a() {}function i(t, e) {
								return u(t, e) && delete t[e];
						}function s(t, e) {
								if (rt) {
										var r = t[e];return r === W ? void 0 : r;
								}return J.call(t, e) ? t[e] : void 0;
						}function u(t, e) {
								return rt ? void 0 !== t[e] : J.call(t, e);
						}function l(t, e, r) {
								t[e] = rt && void 0 === r ? W : r;
						}function c(t) {
								var e = -1,
								    r = t ? t.length : 0;for (this.clear(); ++e < r;) {
										var n = t[e];this.set(n[0], n[1]);
								}
						}function p() {
								this.__data__ = { hash: new a(), map: et ? new et() : [], string: new a() };
						}function f(t) {
								var e = this.__data__;return D(t) ? i("string" == typeof t ? e.string : e.hash, t) : et ? e.map["delete"](t) : x(e.map, t);
						}function h(t) {
								var e = this.__data__;return D(t) ? s("string" == typeof t ? e.string : e.hash, t) : et ? e.map.get(t) : P(e.map, t);
						}function d(t) {
								var e = this.__data__;return D(t) ? u("string" == typeof t ? e.string : e.hash, t) : et ? e.map.has(t) : T(e.map, t);
						}function y(t, e) {
								var r = this.__data__;return D(t) ? l("string" == typeof t ? r.string : r.hash, t, e) : et ? r.map.set(t, e) : O(r.map, t, e), this;
						}function g(t) {
								var e = -1,
								    r = t ? t.length : 0;for (this.clear(); ++e < r;) {
										var n = t[e];this.set(n[0], n[1]);
								}
						}function m() {
								this.__data__ = { array: [], map: null };
						}function v(t) {
								var e = this.__data__,
								    r = e.array;return r ? x(r, t) : e.map["delete"](t);
						}function b(t) {
								var e = this.__data__,
								    r = e.array;return r ? P(r, t) : e.map.get(t);
						}function w(t) {
								var e = this.__data__,
								    r = e.array;return r ? T(r, t) : e.map.has(t);
						}function S(t, e) {
								var r = this.__data__,
								    n = r.array;n && (n.length < E - 1 ? O(n, t, e) : (r.array = null, r.map = new c(n)));var o = r.map;return o && o.set(t, e), this;
						}function x(t, e) {
								var r = R(t, e);if (0 > r) return !1;var n = t.length - 1;return r == n ? t.pop() : tt.call(t, r, 1), !0;
						}function P(t, e) {
								var r = R(t, e);return 0 > r ? void 0 : t[r][1];
						}function T(t, e) {
								return R(t, e) > -1;
						}function R(t, e) {
								for (var r = t.length; r--;) {
										if (C(t[r][0], e)) return r;
								}return -1;
						}function O(t, e, r) {
								var n = R(t, e);0 > n ? t.push([e, r]) : t[n][1] = r;
						}function j(t, e) {
								var r = t[e];return k(r) ? r : void 0;
						}function D(t) {
								var e = typeof t === "undefined" ? "undefined" : _typeof(t);return "number" == e || "boolean" == e || "string" == e && "__proto__" != t || null == t;
						}function _(t) {
								if (null != t) {
										try {
												return K.call(t);
										} catch (e) {}try {
												return t + "";
										} catch (e) {}
								}return "";
						}function C(t, e) {
								return t === e || t !== t && e !== e;
						}function z(t) {
								var e = M(t) ? Q.call(t) : "";return e == L || e == H;
						}function M(t) {
								var e = typeof t === "undefined" ? "undefined" : _typeof(t);return !!t && ("object" == e || "function" == e);
						}function k(t) {
								if (!M(t)) return !1;var e = z(t) || o(t) ? Z : N;return e.test(_(t));
						}var E = 200,
						    W = "__lodash_hash_undefined__",
						    L = "[object Function]",
						    H = "[object GeneratorFunction]",
						    A = /[\\^$.*+?()[\]{}|]/g,
						    N = /^\[object .+?Constructor\]$/,
						    I = { "function": !0, object: !0 },
						    B = I[typeof e === "undefined" ? "undefined" : _typeof(e)] && e && !e.nodeType ? e : void 0,
						    X = I[typeof t === "undefined" ? "undefined" : _typeof(t)] && t && !t.nodeType ? t : void 0,
						    Y = n(B && X && "object" == (typeof r === "undefined" ? "undefined" : _typeof(r)) && r),
						    G = n(I[typeof self === "undefined" ? "undefined" : _typeof(self)] && self),
						    F = n(I[typeof window === "undefined" ? "undefined" : _typeof(window)] && window),
						    q = n(I[_typeof(this)] && this),
						    U = Y || F !== (q && q.window) && F || G || q || Function("return this")(),
						    $ = Array.prototype,
						    V = Object.prototype,
						    K = Function.prototype.toString,
						    J = V.hasOwnProperty,
						    Q = V.toString,
						    Z = RegExp("^" + K.call(J).replace(A, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
						    tt = $.splice,
						    et = j(U, "Map"),
						    rt = j(Object, "create");a.prototype = rt ? rt(null) : V, c.prototype.clear = p, c.prototype["delete"] = f, c.prototype.get = h, c.prototype.has = d, c.prototype.set = y, g.prototype.clear = m, g.prototype["delete"] = v, g.prototype.get = b, g.prototype.has = w, g.prototype.set = S, t.exports = g;
				}).call(e, r(8)(t), function () {
						return this;
				}());
		}, function (t, e) {
				function r(t, e) {
						for (var r = -1, n = Array(t); ++r < t;) {
								n[r] = e(r);
						}return n;
				}function n(t, e) {
						return t = "number" == typeof t || T.test(t) ? +t : -1, e = null == e ? b : e, t > -1 && t % 1 == 0 && e > t;
				}function o(t, e) {
						return O.call(t, e) || "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && e in t && null === s(t);
				}function a(t) {
						return C(Object(t));
				}function i(t) {
						return function (e) {
								return null == e ? void 0 : e[t];
						};
				}function s(t) {
						return _(Object(t));
				}function u(t) {
						var e = t ? t.length : void 0;return d(e) && (M(t) || m(t) || c(t)) ? r(e, String) : null;
				}function l(t) {
						var e = t && t.constructor,
						    r = "function" == typeof e && e.prototype || R;return t === r;
				}function c(t) {
						return f(t) && O.call(t, "callee") && (!D.call(t, "callee") || j.call(t) == w);
				}function p(t) {
						return null != t && d(z(t)) && !h(t);
				}function f(t) {
						return g(t) && p(t);
				}function h(t) {
						var e = y(t) ? j.call(t) : "";return e == S || e == x;
				}function d(t) {
						return "number" == typeof t && t > -1 && t % 1 == 0 && b >= t;
				}function y(t) {
						var e = typeof t === "undefined" ? "undefined" : _typeof(t);return !!t && ("object" == e || "function" == e);
				}function g(t) {
						return !!t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t));
				}function m(t) {
						return "string" == typeof t || !M(t) && g(t) && j.call(t) == P;
				}function v(t) {
						var e = l(t);if (!e && !p(t)) return a(t);var r = u(t),
						    i = !!r,
						    s = r || [],
						    c = s.length;for (var f in t) {
								!o(t, f) || i && ("length" == f || n(f, c)) || e && "constructor" == f || s.push(f);
						}return s;
				}var b = 9007199254740991,
				    w = "[object Arguments]",
				    S = "[object Function]",
				    x = "[object GeneratorFunction]",
				    P = "[object String]",
				    T = /^(?:0|[1-9]\d*)$/,
				    R = Object.prototype,
				    O = R.hasOwnProperty,
				    j = R.toString,
				    D = R.propertyIsEnumerable,
				    _ = Object.getPrototypeOf,
				    C = Object.keys,
				    z = i("length"),
				    M = Array.isArray;t.exports = v;
		}, function (t, e, r) {
				"use strict";
				function n(t) {
						return t && t.__esModule ? t : { "default": t };
				}function o(t, e) {
						var r = {};for (var n in t) {
								e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(t, n) && (r[n] = t[n]);
						}return r;
				}function a(t, e) {
						if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
				}function i(t, e) {
						if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) && "function" != typeof e ? t : e;
				}function s(t, e) {
						if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
				}e.__esModule = !0;var u = Object.assign || function (t) {
						for (var e = 1; e < arguments.length; e++) {
								var r = arguments[e];for (var n in r) {
										Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
								}
						}return t;
				},
				    l = r(1),
				    c = n(l),
				    p = r(7),
				    f = n(p),
				    h = function (t) {
						function e() {
								var r, n, o;a(this, e);for (var s = arguments.length, u = Array(s), l = 0; s > l; l++) {
										u[l] = arguments[l];
								}return r = n = i(this, t.call.apply(t, [this].concat(u))), n.state = { width: n.props.width, height: n.props.height }, n.onResize = function (t, e) {
										var r = e.element,
										    o = e.size;o.width, o.height;n.setState(o, function () {
												n.props.onResize && n.props.onResize(t, { element: r, size: o });
										});
								}, o = r, i(n, o);
						}return s(e, t), e.prototype.render = function () {
								var t = this.props,
								    e = t.handleSize,
								    r = t.onResizeStart,
								    n = t.onResizeStop,
								    a = t.draggableOpts,
								    i = t.minConstraints,
								    s = t.maxConstraints,
								    l = t.lockAspectRatio,
								    p = (t.width, t.height, o(t, ["handleSize", "onResizeStart", "onResizeStop", "draggableOpts", "minConstraints", "maxConstraints", "lockAspectRatio", "width", "height"]));return c["default"].createElement(f["default"], { handleSize: e, width: this.state.width, height: this.state.height, onResizeStart: r, onResize: this.onResize, onResizeStop: n, draggableOpts: a, minConstraints: i, maxConstraints: s, lockAspectRatio: l }, c["default"].createElement("div", u({ style: { width: this.state.width + "px", height: this.state.height + "px" } }, p)));
						}, e;
				}(c["default"].Component);h.propTypes = { height: l.PropTypes.number, width: l.PropTypes.number }, h.defaultProps = { handleSize: [20, 20] }, e["default"] = h;
		}, function (t, e, r) {
				"use strict";
				function n(t) {
						return t && t.__esModule ? t : { "default": t };
				}var o = Object.assign || function (t) {
						for (var e = 1; e < arguments.length; e++) {
								var r = arguments[e];for (var n in r) {
										Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
								}
						}return t;
				},
				    a = r(1),
				    i = n(a);t.exports = function (t, e) {
						return e.style && t.props.style && (e.style = o({}, t.props.style, e.style)), e.className && t.props.className && (e.className = t.props.className + " " + e.className), i["default"].cloneElement(t, e);
				};
		}, function (t, e, r) {
				"use strict";
				t.exports = function () {
						throw new Error("Don't instantiate Resizable directly! Use require('react-resizable').Resizable");
				}, t.exports.Resizable = r(7)["default"], t.exports.ResizableBox = r(16)["default"];
		}]);
});
//# sourceMappingURL=react-grid-layout.min.js.map
//# sourceMappingURL=data:application/json;base64,